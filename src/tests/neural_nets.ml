open Transformer_stuff
module Value = Micrograd.Value

let value_to_float (v : Micrograd.Value.t) = v.value
let co = Micrograd.Value.co

let basic_neuron_test () =
  let open Neural_nets in
  Stdlib.Random.init 0;
  let neur = Neuron.init 1 in
  let x = Micrograd.Value.co 5. in
  let expected = -0.72661 in
  let actual = (Neuron.call [ x ] neur).value in
  Alcotest.(check' (float 0.001)) ~msg:"single neuron works" ~expected ~actual

let basic_layer_test () =
  let open Neural_nets in
  Stdlib.Random.init 0;
  let layer = Layer.init 1 3 in
  let x = Micrograd.Value.co 5. in
  let expected = [ -0.72661; -0.795354; -0.930156 ] in
  let actual = List.map value_to_float (Layer.call [ x ] layer) in
  Alcotest.(check' (list (float 0.001)))
    ~msg:"single layer works" ~expected ~actual

let basic_nn_test () =
  let open Neural_nets in
  Stdlib.Random.init 0;
  let n = MLP.init 3 [ 4; 4; 1 ] in
  let x = List.map (fun n -> Micrograd.Value.co n) [ 2.; 3.; -1. ] in
  let expected = [ -0.774517 ] in
  let actual = List.map value_to_float (MLP.call x n) in
  Alcotest.(check' (list (float 0.001))) ~msg:"small nn works" ~expected ~actual

let find_gradient_of_loss () =
  let open Neural_nets in
  Stdlib.Random.init 0;
  let n = MLP.init 3 [ 4; 4; 1 ] in
  let xs =
    List.map (List.map co)
      [ [ 2.; 3.; -1. ]; [ 3.; -1.; 0.5 ]; [ 0.5; 1.; 1. ]; [ 1.; 1.; -1. ] ]
  in
  let ys = List.map co [ 1.; -1.; -1.; 1. ] in
  let y_pred = List.map (fun input -> MLP.call input n) xs |> List.flatten in
  let loss =
    List.fold_left2
      Value.(fun acc l r -> ((l - r) ** co 2.) + acc)
      (co 0.) ys y_pred
  in
  let loss_w_grad = Micrograd.Utils.backwards loss in
  (* param count: 446 *)
  let params = Micrograd.Utils.topological_sort loss_w_grad in
  Format.eprintf "param count is : %d\n%!" (List.length params);

  let expected =
    [
      1.;
      1.;
      1.;
      1.;
      1.;
      1.;
      3.14891;
      4.29782;
      4.29782;
      -3.32873;
      -4.29782;
      -1.71966;
      -1.71966;
      -1.71966;
      1.64912;
      1.56195;
      1.56195;
      1.56195;
      1.56195;
      1.56195;
      1.56195;
      1.56195;
      1.56195;
      1.56195;
      1.56195;
      -1.71966;
      -1.71966;
      -1.41606;
      -1.40455;
      -1.40455;
      -1.40455;
      -1.40455;
      -1.40455;
      -1.40455;
      -1.40455;
      -1.40455;
      -1.40455;
      -1.40455;
      -1.71966;
      -1.71966;
      -0.147574;
      -0.0904199;
      -0.0904199;
      -0.0904199;
      -0.0904199;
      -0.0904199;
      -0.0904199;
      -0.0904199;
      -0.0904199;
      -0.0904199;
      -0.0904199;
      -1.71966;
      -1.71966;
      -0.550561;
      -0.516288;
      -0.516288;
      -0.516288;
      0.347798;
      0.00653959;
      0.00653959;
      0.00653959;
      0.00653959;
      0.00653959;
      0.00653959;
      0.00653959;
      0.00653959;
      -0.516288;
      -0.516288;
      0.950365;
      0.263874;
      0.263874;
      0.263874;
      0.263874;
      0.263874;
      0.263874;
      0.263874;
      0.263874;
      -0.516288;
      -0.516288;
      2.45732;
      0.524289;
      0.524289;
      0.524289;
      0.524289;
      0.524289;
      0.524289;
      0.524289;
      0.524289;
      -0.516288;
      -0.516288;
      -2.01134;
      -0.0583335;
      -0.0583335;
      -0.0583335;
      0.299924;
      -0.0583335;
      -0.0583335;
      0.120028;
      -0.0583335;
      -0.0583335;
      -0.247076;
      -0.0583335;
      -0.516288;
      -1.71966;
      4.29782;
      1.;
      0.00765205;
      -1.9847;
      -1.9847;
      1.81108;
      1.9847;
      0.332039;
      0.332039;
      0.332039;
      -0.318419;
      -0.07391;
      -0.07391;
      -0.07391;
      -0.07391;
      -0.07391;
      -0.07391;
      -0.07391;
      -0.07391;
      -0.07391;
      -0.07391;
      0.332039;
      0.332039;
      0.273419;
      0.140936;
      0.140936;
      0.140936;
      0.140936;
      0.140936;
      0.140936;
      0.140936;
      0.140936;
      0.140936;
      0.140936;
      0.332039;
      0.332039;
      0.0284943;
      0.00229481;
      0.00229481;
      0.00229481;
      0.00229481;
      0.00229481;
      0.00229481;
      0.00229481;
      0.00229481;
      0.00229481;
      0.00229481;
      0.332039;
      0.332039;
      0.106305;
      0.0242749;
      0.0242749;
      0.0242749;
      0.0481514;
      0.00241188;
      0.00241188;
      0.00241188;
      0.00241188;
      0.00241188;
      0.00241188;
      0.00241188;
      0.00241188;
      0.0242749;
      0.0242749;
      -0.0497468;
      -0.0143704;
      -0.0143704;
      -0.0143704;
      -0.0143704;
      -0.0143704;
      -0.0143704;
      -0.0143704;
      -0.0143704;
      0.0242749;
      0.0242749;
      -0.185495;
      -0.0978602;
      -0.0978602;
      -0.0978602;
      -0.0978602;
      -0.0978602;
      -0.0978602;
      -0.0978602;
      -0.0978602;
      0.0242749;
      0.0242749;
      0.115818;
      0.0116587;
      0.0116587;
      0.0116587;
      -0.0553607;
      0.0116587;
      0.0116587;
      -0.0428779;
      0.0116587;
      0.0116587;
      0.0449862;
      0.0116587;
      0.0242749;
      0.332039;
      -1.9847;
      1.;
      0.0021026;
      -1.99579;
      -1.99579;
      1.90428;
      1.99579;
      0.178834;
      0.178834;
      0.178834;
      -0.171498;
      -0.0639291;
      -0.0639291;
      -0.0639291;
      -0.0639291;
      -0.0639291;
      -0.0639291;
      -0.0639291;
      -0.0639291;
      -0.0639291;
      -0.0639291;
      0.178834;
      0.178834;
      0.147262;
      0.14153;
      0.14153;
      0.14153;
      0.14153;
      0.14153;
      0.14153;
      0.14153;
      0.14153;
      0.14153;
      0.14153;
      0.178834;
      0.178834;
      0.0153468;
      0.00358127;
      0.00358127;
      0.00358127;
      0.00358127;
      0.00358127;
      0.00358127;
      0.00358127;
      0.00358127;
      0.00358127;
      0.00358127;
      0.178834;
      0.178834;
      0.0572551;
      0.0566579;
      0.0566579;
      0.0566579;
      0.0292016;
      0.00307394;
      0.00307394;
      0.00307394;
      0.00307394;
      0.00307394;
      0.00307394;
      0.00307394;
      0.00307394;
      0.0566579;
      0.0566579;
      -0.0479242;
      -0.0470841;
      -0.0470841;
      -0.0470841;
      -0.0470841;
      -0.0470841;
      -0.0470841;
      -0.0470841;
      -0.0470841;
      0.0566579;
      0.0566579;
      -0.162155;
      -0.0134391;
      -0.0134391;
      -0.0134391;
      -0.0134391;
      -0.0134391;
      -0.0134391;
      -0.0134391;
      -0.0134391;
      0.0566579;
      0.0566579;
      0.120516;
      0.0765745;
      0.0765745;
      0.0765745;
      -0.02236;
      0.0765745;
      0.0765745;
      0.0922134;
      0.0765745;
      0.0765745;
      -0.0131005;
      0.0765745;
      0.0566579;
      0.178834;
      -1.99579;
      1.;
      3.32143;
      4.64287;
      4.64287;
      -3.81867;
      -4.64287;
      -1.50209;
      -2.71088;
      -1.50209;
      -1.50209;
      1.44047;
      1.41315;
      2.83726;
      1.41315;
      1.41315;
      1.98073;
      1.41315;
      1.41315;
      -1.09818;
      1.41315;
      1.41315;
      2.08574;
      1.41315;
      1.41315;
      2.68298;
      1.41315;
      -0.169624;
      -1.50209;
      -1.50209;
      -1.2369;
      -1.18428;
      -2.30637;
      -1.18428;
      -1.18428;
      -1.59442;
      -1.18428;
      -1.18428;
      1.07982;
      -1.18428;
      -1.18428;
      -1.80277;
      -1.18428;
      -1.18428;
      -2.36443;
      -1.18428;
      0.35066;
      -1.50209;
      -1.50209;
      -0.128903;
      -0.0212574;
      -0.105801;
      -0.0212574;
      -0.0212574;
      -0.0924564;
      -0.0212574;
      -0.0212574;
      0.0747434;
      -0.0212574;
      -0.0212574;
      -0.0890362;
      -0.0212574;
      -0.0212574;
      -0.105846;
      -0.0212574;
      1.96788;
      -1.50209;
      -1.50209;
      -0.480904;
      -0.404483;
      -0.839838;
      -0.404483;
      -0.404483;
      0.310083;
      0.260332;
      0.272358;
      0.260332;
      0.260332;
      -0.262592;
      0.260332;
      0.260332;
      0.280613;
      0.260332;
      0.260332;
      0.282184;
      0.260332;
      -0.596176;
      -0.404483;
      -0.404483;
      0.791259;
      0.755571;
      0.957991;
      0.755571;
      0.755571;
      -1.07371;
      0.755571;
      0.755571;
      1.51448;
      0.755571;
      0.755571;
      1.21667;
      0.755571;
      0.380867;
      -0.404483;
      -0.404483;
      2.20466;
      1.64685;
      2.05984;
      1.64685;
      1.64685;
      -2.23351;
      1.64685;
      1.64685;
      3.30414;
      1.64685;
      1.64685;
      2.39513;
      1.64685;
      -0.623793;
      -0.404483;
      -0.404483;
      -1.80877;
      -0.688054;
      -0.658154;
      -0.688054;
      -0.688054;
      1.30149;
      0.828791;
      -0.688054;
      -0.688054;
      0.148625;
      -0.798139;
      -0.688054;
      -0.688054;
      -0.374463;
      -0.731457;
      -0.688054;
      -0.815943;
      -0.404483;
      -1.30126;
      -1.50209;
      4.64287;
    ]
  in

  let actual = List.map (fun (p : Micrograd.Value.t) -> !(p.grad)) params in
  Alcotest.(check' (list (float 0.001)))
    ~msg:"backwards produces reasonable gradients" ~expected ~actual

let tests =
  [
    ("neuron test", `Quick, basic_neuron_test);
    ("layer test", `Quick, basic_layer_test);
    ("nn test", `Quick, basic_nn_test);
    ("nn test", `Quick, find_gradient_of_loss);
  ]
